clear all;

data_path = '/data/biophys/yusipov/mbl_zero_super_vector/results';
figures_path = '/home/yusipov/mbl_zero_super_vector/figures';

Nc                  = 8;
dissipator_type     = 1;
alpha               = 0;		
energy_type         = 0;
border_conditions   = 1;
W                   = 4;
U                   = 1;
J                   = 1;
g                   = 0.1;
seed_start          = 1;
seed_num            = 100;

num_seed_start = 100;

num_intervals = 100;

size_total = seed_num * num_seed_start;

data = zeros(size_total, 1);

for ss = seed_start : seed_num: seed_start + seed_num * (num_seed_start - 1)

    ss = ss
    
    for seed = ss : ss + (seed_num-1)
        
		file_name_tree = sprintf('Nc_%d/dt_%d/alpha_%0.4f/et_%d/bc_%d/W_%0.4f/U_%0.4f/J_%0.4f/g_%0.4f/seed_start_%d', ...
			Nc, ...
			dissipator_type, ...
            alpha, ...
            energy_type, ...
            border_conditions, ...
            W, ...
            U, ...
            J, ...
            g, ...
            ss);
		
        file_name_suffix = sprintf('Nc(%d)_dt(%d)_alpha(%0.4f)_et(%d)_bc(%d)_W(%0.4f)_U(%0.4f)_J(%0.4f)_gamma(%0.4f)_ss(%d)_sn(%d)_seed(%d)', ...
            Nc, ...
            dissipator_type, ...
            alpha, ...
            energy_type, ...
            border_conditions, ...
            W, ...
            U, ...
            J, ...
            g, ...
            ss, ...
            seed_num, ...
            seed);
			
        file_name = sprintf('%s/%s/characteristics_%s.txt.txt', ...
            data_path, file_name_tree, file_name_suffix);

        local_data = importdata(file_name);
        
        data(seed) = local_data(2);
    end
end

min_val = min(data)
max_val = max(data)

shift_val = (max_val - min_val) / num_intervals;
intervals_vals = zeros(num_intervals, 1);
vals = zeros(num_intervals, 1);
for i = 1:num_intervals
    intervals_vals(i) = min_val + i * shift_val - 0.5 * shift_val;
end

for i = 1:size_total
    
    current_val = data(i);
    
    if ((current_val >= min_val) && (current_val <= max_val))
        id_val = floor((current_val - min_val) * num_intervals / (max_val - min_val + 0.000001)) + 1;
        vals(id_val) = vals(id_val) + 1;
    end
end

for i = 1:num_intervals
    vals(i) = vals(i) / (size_total * shift_val);
end


file_name_suffix = sprintf('Nc(%d)_dt(%d)_alpha(%0.4f)_et(%d)_bc(%d)_W(%0.4f)_U(%0.4f)_J(%0.4f)_gamma(%0.4f)_sn(%d)', ...
            Nc, ...
            dissipator_type, ...
            alpha, ...
            energy_type, ...
            border_conditions, ...
            W, ...
            U, ...
            J, ...
            g, ...
            size_total);

figure;
hLine = plot(intervals_vals, vals, '-o', 'LineWidth', 2);
set(gca, 'FontSize', 30);
xlabel('$I$', 'Interpreter', 'latex');
set(gca, 'FontSize', 30);
ylabel('$PDF(I)$', 'Interpreter', 'latex');

savefig(sprintf('%s/pdf_imbalance_%s.fig', ...
	figures_path, file_name_suffix));